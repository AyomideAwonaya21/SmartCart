generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  passwordHash String
  role         Role     @default(CUSTOMER)
  createdAt    DateTime @default(now())

  orders    Order[]
  reviews   Review[]
  addresses Address[]
  carts     Cart[]      // back-reference for Cart.user
}

enum Role {
  ADMIN
  CUSTOMER
}

model Product {
  id            String         @id @default(cuid())
  title         String
  slug          String         @unique
  description   String
  priceCents    Int
  currency      String         @default("USD")
  status        ProductStatus  @default(DRAFT)
  mainImageUrl  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  images       ProductImage[]
  inventory    Inventory?
  categories   ProductCategory[]
  reviews      Review[]
  cartItems    CartItem[]   // back-reference for CartItem.product
  orderItems   OrderItem[]  // back-reference for OrderItem.product
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  alt       String?

  product Product @relation(fields: [productId], references: [id])
}

model Inventory {
  id        String  @id @default(cuid())
  productId String  @unique
  sku       String  @unique
  quantity  Int     @default(0)

  product Product @relation(fields: [productId], references: [id])
}

model Category {
  id    String  @id @default(cuid())
  name  String  @unique
  slug  String  @unique

  products ProductCategory[]
}

model ProductCategory {
  productId  String
  categoryId String

  product  Product  @relation(fields: [productId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
}

model Cart {
  id        String   @id @default(cuid())
  sessionId String   @unique
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User?      @relation(fields: [userId], references: [id])
  items CartItem[]
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  sku       String
  quantity  Int
  unitPrice Int

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Order {
  id                     String      @id @default(cuid())
  userId                 String
  status                 OrderStatus @default(PENDING)
  totalCents             Int
  currency               String      @default("USD")
  stripePaymentIntentId  String?     @unique
  createdAt              DateTime    @default(now())

  user  User       @relation(fields: [userId], references: [id])
  items OrderItem[]
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  SHIPPED
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  sku       String
  quantity  Int
  unitPrice Int

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  type       AddressType
  line1      String
  city       String
  region     String
  postalCode String
  country    String

  user User @relation(fields: [userId], references: [id])
}

enum AddressType {
  BILLING
  SHIPPING
}

model Review {
  id        String       @id @default(cuid())
  productId String
  userId    String
  rating    Int
  title     String
  body      String
  status    ReviewStatus @default(PENDING)
  createdAt DateTime     @default(now())

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

enum ReviewStatus {
  PENDING
  PUBLISHED
  REJECTED
}

model WebhookLog {
  id             String   @id @default(cuid())
  provider       String
  eventType      String
  status         String
  signatureValid Boolean
  payload        Json
  createdAt      DateTime @default(now())
}
